"""
This module contains standalone utility functions
"""
import re
from dateutil import tz
from dateutil.parser import parse
from datetime import datetime
from typing import List, Optional


def get_patch_notes_line_number(commentBody: str) -> Optional[int]:
    """
        Returns the first integer from the comment body

        Returns None if no valid integer can be found
        """
    comment_first_line = commentBody.partition("\n")[0]
    number_line_match = re.search(r"\d+", comment_first_line)
    if number_line_match is None:
        return None

    return int(number_line_match.group())


def is_game_expired(time_string: str) -> bool:
    """
    Takes in a time string to determine if the game has expired

    Returns:
        True if the present time is later than the game end time
        False otherwise
    """
    game_end_datetime = parse(time_string, fuzzy=True)
    present_time = datetime.now(tz.UTC)
    return present_time > game_end_datetime


def output_winners_list_to_file(
    potential_winners_list: List[str], winners_list: List[str], output_file_path: str
):
    """
    Outputs the list of winners & potential winners to an output file

    Returns:
        String content that was written to the file

    Attributes:
        potential_winners_list: the list of potential winners
        winners_list: the list of actual winners
        output_file_path: the path to where the data will be output
    """
    with open(output_file_path, "a+") as output_file:
        # Reference for reading & overwriting a file: https://stackoverflow.com/a/2424410
        text = output_file.read()
        output_file.seek(0)
        output_file.write(text)
        output_file.truncate()

        # Winners subheading and content
        file_content = "## Winners\n\n```"

        for winner in winners_list:
            file_content += f"{winner}\n"
        file_content += "```"

        # Potential Winners subheading and content
        file_content += "\n## Potential Winners\n\n```"
        for user in potential_winners_list:
            file_content += f"{user}\n"
        file_content += "```"
        output_file.write(file_content)

        winners_submission_content = (
            "\n# Update\n___\n\nThe game has now ended. Thank you to everyone for playing!\n\n"
            + "The winners list & potential winners pool have been posted below (auto-generated by the bot).\n\n"
            + file_content
            + "\n___\n\n"
        )
        return winners_submission_content


def generate_submission_compiled_patch_notes_template_line(line_number: int):
    """
    For a given line number, construct the template line for the community-compiled patch notes.
    """
    return f">{str(line_number)} |\n\n"


def convert_time_string_to_wolframalpha_query_url(time_string: str) -> str:
    """
    Converts a time string to a Wolframalpha URL

    Returns:
        - The converted URL that links to the Wolframalpha query results
    """
    formatted_query = time_string.replace(" ", "+")
    return f"https://www.wolframalpha.com/input/?i={formatted_query}"
